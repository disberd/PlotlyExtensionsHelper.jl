module ColorSchemesExtensionModule

using ColorSchemes
using ColorSchemes.Colors
using ColorSchemes.ColorTypes
using PlotlyExtensionsHelper
using PlotlyExtensionsHelper: sample_colorscheme, discrete_colorscale

# These are necessary just to create the discrete colorscale, we only go through RGBA
_preprocess(c::Colorant) = @views begin
    s = hex(c, :rrggbbaa)
    r = parse(Int, s[1:2]; base=16)
    g = parse(Int, s[3:4]; base=16)
    b = parse(Int, s[5:6]; base=16)
    a = parse(Int, s[7:8]; base=16)
    return "rgba($r,$g,$b,$(a/255))"
end


# Sample colorscheme
function PlotlyExtensionsHelper.sample_colorscheme(cs::ColorScheme, sample_points::AbstractVector; alpha = nothing)
    @assert minimum(sample_points) >= 0 && maximum(sample_points) <= 1 "sample_points must be in the range [0, 1]"
    colors = map(sample_points) do i
        c = get(cs, i)
        ca = convert(RGBA, c)
        if alpha === nothing
            ca
        else
            RGBA(ca.r, ca.g, ca.b, alpha)
        end
    end
    return ColorScheme(colors, "custom", "autogenerated")
end
PlotlyExtensionsHelper.sample_colorscheme(cs::ColorScheme, npoints::Int = length(cs); kwargs...) = sample_colorscheme(cs, range(0, 1, length = npoints); kwargs...)
function PlotlyExtensionsHelper.sample_colorscheme(cs_name::Symbol, args...; kwargs...) 
    cs = get(colorschemes, cs_name) do 
        error("colorscheme name must be a valid key for the `ColorSchemes.colorschemes` Dict.\n$(cs_name) not found within the valid keys")
    end 
    sample_colorscheme(cs, args...; kwargs...)
end

### Discrete colorscale
function PlotlyExtensionsHelper.discrete_colorscale(cs::Union{ColorScheme, Symbol}, points; alpha = nothing)
    colors = sample_colorscheme(cs, points; alpha).colors
    return discrete_colorscale(colors)
end
function PlotlyExtensionsHelper.discrete_colorscale(colors::AbstractVector{<:Colorant})
    N = length(colors)
    cols = map(enumerate(colors)) do (i,c)
		[
			((i-1)/N, _preprocess(c))			
			((i)/N, _preprocess(c))
		]
	end
	vcat(cols...)
end

end
